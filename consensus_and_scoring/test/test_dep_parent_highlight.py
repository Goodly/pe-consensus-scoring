import sys
import os
import pandas as pd

import test_utils
from filegen_utils import *
from Dependency import *
import conftest

def test_dep_parent(config):
    #Test if parent has highlight, children don't, dep_iaa should have parent's highlight
    iaa_files_path=test_utils.make_test_directory(config, 'dep_parent')
    outpath=test_utils.make_test_directory(config, 'out_dep_parent')
    # source_task_id generated by smashing keyboard
    all_schema=[ [{"agreed_Answer": 1, "question_Number": 1, "namespace": 'Covid_Probability','highlighted_indices': test_utils.make_highlight_indices(10,30)},{"agreed_Answer": 3, "question_Number": 2, "namespace": 'Covid_Probability'},2],
                 [{"agreed_Answer": 2, "question_Number": 1, "namespace": 'Covid_Languagev1.1','highlighted_indices': test_utils.make_highlight_indices(10,30)},{"agreed_Answer": 3, "question_Number": 3, "namespace": 'Covid_Languagev1.1'},3],
                 [{"agreed_Answer": 4, "question_Number": 15, "namespace": 'Covid_Holisticv1.2','highlighted_indices': test_utils.make_highlight_indices(10, 30)},{"agreed_Answer": 1, "question_Number": 16, "namespace": 'Covid_Holisticv1.2'},16],
                 [{"agreed_Answer": 1, "question_Number": 1, "namespace": 'Covid_Evidence2020_03_21',
                   'highlighted_indices': test_utils.make_highlight_indices(10, 30)},
                  {"agreed_Answer": 1, "question_Number": 2, "namespace": 'Covid_Evidence2020_03_21',
                   'highlighted_indices': test_utils.make_highlight_indices(10, 30)},
                  {"agreed_Answer": 3, "question_Number": 4, "namespace": 'Covid_Evidence2020_03_21'}, 4],
                 [{"agreed_Answer": 1, "question_Number": 1, "namespace": 'Covid_Reasoning', 'highlighted_indices': test_utils.make_highlight_indices(80, 120)},{"agreed_Answer": 1, "question_Number": 2, "namespace": 'Covid_Reasoning','highlighted_indices': test_utils.make_highlight_indices(10, 30)},{"agreed_Answer": 1,
                                                                                      "question_Number": 7,
                                                                                      "namespace": 'Covid_Reasoning'}, 7]
                 ]

    #The test fails if I add these two to the all_Schema list, which I don't understand why since I have been following the same logic
    #[{"agreed_Answer": 1, "question_Number": 2, "namespace": 'Covid_Evidence2020_03_21','highlighted_indices': test_utils.make_highlight_indices(10, 30)},{"agreed_Answer": 3, "question_Number": 4, "namespace": 'Covid_Evidence2020_03_21'}, 4],
    #[{"agreed_Answer": 1, "question_Number": 2, "namespace": 'Covid_Reasoning','highlighted_indices': test_utils.make_highlight_indices(10, 30)}ï¼Œ{"agreed_Answer": 1, "question_Number": 7, "namespace": 'Covid_Reasoning'}, 7]
    for i in all_schema:
        print(i)
        iaa = IAA_task(out_folder=iaa_files_path, source_task_id="auhfdaiughfs")
        for row in i:
            if isinstance(row, dict):
                iaa.add_row(row)
        fin_path = iaa.export()
        data_path = config['data_dir']
        schema_path = data_path + '/schemas'
        dh_path = None #doesn't get used by dependency but is still an argument
        eval_dependency(dh_path, iaa_files_path, schema_path, outpath)
        for root, dir, files in os.walk(outpath):
            for file in files:
                #should be only 1 file for this case, so just run it on the only one
                # if there's more than 1 then you can get fancy
                out_df  = pd.read_csv(os.path.join(outpath, file), encoding='utf-8')
        #9 answer choices to a checklist question
        #This basically works for my first test, child should have parent's highlights if itself doesn't have any but its parent does, thx eric~.
                #assert len(out_df) == 2
                q_three = out_df[out_df['question_Number']==i[-1]]
                hl = q_three['highlighted_indices'].iloc[0]
                assert len(hl) >18
                assert '10' in hl
                assert '29' in hl


def test_dep_parent1(config):
    #Test if parent doesn't have highlight, child does, child still have its highlight
    iaa_files_path=test_utils.make_test_directory(config, 'dep_parent1')
    outpath=test_utils.make_test_directory(config, 'out_dep_parent1')
    # source_task_id generated by smashing keyboard
    all_schema=[ [{"agreed_Answer": 2, "question_Number": 4, "namespace": 'Covid_Sources_2002_03_20v2.1','highlighted_indices': test_utils.make_highlight_indices(10,30)},{"agreed_Answer": 1, "question_Number": 3, "namespace": 'Covid_Sources_2002_03_20v2.1'},4],
                 [{"agreed_Answer": 1, "question_Number": 2, "namespace": 'Covid_Reasoning','highlighted_indices': test_utils.make_highlight_indices(10,30)},{"agreed_Answer": 1, "question_Number": 1, "namespace": 'Covid_Reasoning'},2]
                 ]

    for i in all_schema:
        print(i)
        iaa = IAA_task(out_folder=iaa_files_path, source_task_id="auhfdaiughfs")
        iaa.add_row(i[1])
        iaa.add_row(i[0])
        fin_path = iaa.export()
        data_path = config['data_dir']
        schema_path = data_path + '/schemas'
        dh_path = None #doesn't get used by dependency but is still an argument
        eval_dependency(dh_path, iaa_files_path, schema_path, outpath)
        for root, dir, files in os.walk(outpath):
            for file in files:
                #should be only 1 file for this case, so just run it on the only one
                # if there's more than 1 then you can get fancy
                out_df  = pd.read_csv(os.path.join(outpath, file), encoding='utf-8')
        #9 answer choices to a checklist question
        #This basically works for my first test, child should have parent's highlights if itself doesn't have any but its parent does, thx eric~.
        assert len(out_df) == 2
        q_three = out_df[out_df['question_Number']==i[2]]
        hl = q_three['highlighted_indices'].iloc[0]
        assert len(hl) >18
        assert '10' in hl
        assert '29' in hl


